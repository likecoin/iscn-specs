// .proto file used by LikeCoin chain

syntax = "proto3";
package likechain.iscn;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "iscn/params.proto";

option go_package = "github.com/likecoin/likechain/x/iscn/types";

service Query {
  rpc RecordsById(QueryRecordsByIdRequest) returns (QueryRecordsByIdResponse) {
    option (google.api.http).get = "/iscn/records/id";
  }

  rpc RecordsByFingerprint(QueryRecordsByFingerprintRequest) returns (QueryRecordsByFingerprintResponse) {
    option (google.api.http).get = "/iscn/records/fingerprint";
  }

  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/iscn/parameters";
  }

  rpc GetCid(QueryGetCidRequest) returns (QueryGetCidResponse) {
    option (google.api.http).get = "/iscn/get_cid/{cid}";
  }

  rpc HasCid(QueryHasCidRequest) returns (QueryHasCidResponse) {
    option (google.api.http).get = "/iscn/has_cid/{cid}";
  }

  rpc GetCidSize(QueryGetCidSizeRequest) returns (QueryGetCidSizeResponse) {
    option (google.api.http).get = "/iscn/get_cid_size/{cid}";
  }
}

message QueryResponseRecord {
  string ipld = 1;
  bytes data = 2 [
    (gogoproto.customtype) = "IscnInput",
    (gogoproto.nullable) = false
  ];
}

message QueryRecordsByIdRequest {
  string iscn_id = 1;
  uint64 from_version = 2;
  uint64 to_version = 3;
}

message QueryRecordsByIdResponse  {
  string owner = 1;
  uint64 latest_version = 2;
  repeated QueryResponseRecord records = 3 [(gogoproto.nullable) = false];
}

message QueryRecordsByFingerprintRequest {
  string fingerprint = 1;
  uint64 from_sequence = 2;
}

message QueryRecordsByFingerprintResponse  {
  repeated QueryResponseRecord records = 1 [(gogoproto.nullable) = false];
  uint64 next_sequence = 2;
}

message QueryParamsRequest {
}

message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetCidRequest {
  string cid = 1;
}

message QueryGetCidResponse {
  bytes data = 1;
}

message QueryGetCidSizeRequest {
  string cid = 1;
}

message QueryGetCidSizeResponse {
  uint64 size = 1;
}

message QueryHasCidRequest {
  string cid = 1;
}

message QueryHasCidResponse {
  bool exist = 1;
}
